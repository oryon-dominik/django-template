projects:
  - name: '{{ project_name }}' # Name may contain lowercase letters, spaces, numbers, hyphens, and underscores
    description: '{{ project_name }} description'

    # probably all dotenv examples should be here.. and setup develop and prod envs, manually add the secrets on doppler after 

    # List of totally customizable environments, e.g Test, Stage, QA, CI-CD
    environments:
      - name: 'Development' # Name may contain letters, spaces, numbers, hyphens, and underscores
        slug: 'dev' # Slug may contain letters, numbers, hyphens, and underscores
        configs:
          - slug: 'dev' # First slug *must* match environment slug name
          - slug: 'dev_snowflake'
      - name: 'Production'
        slug: 'production'
        configs:
          - slug: 'production'
      - name: 'Staging'
        slug: 'staging'
        configs:
          - slug: 'staging'
      - name: 'Test'
        slug: 'test'
        configs:
          - slug: 'test'
    # Define secrets for each environment
    secrets:
      dev:
        PROJECT_FQDN: 'http://localhost:8000'
        PROJECT_FRONTEND_FQDN: ''
        DJANGO_SETTINGS_MODULE: 'config.settings.develop'
        DJANGO_ALLOW_ASYNC_UNSAFE: 'true'
        DJANGO_SECRET_KEY: '{{ secret_key }}'
        DJANGO_ADMIN_URL: 'admin/'
        # --- POSTGRES ----------------------------------------------------------------
        # postgres settings might be specific to a developer if you're using your own postgres instance
        # doppler configure set config=dev_aro
        # these settings get injected into the postgres docker, before you build
        # if you change them, you need to rebuild the postgres docker (and remove the old volume)
        # docker volume rm {{ project_name }}_postgres_data
        POSTGRES_USER: '{{ project_name }}devuser'
        POSTGRES_PASSWORD: 'develop'
        POSTGRES_DB: '{{ project_name }}devdb'
        POSTGRES_OPTIONS: '?sslmode=prefer'
        # this is used by django only, to change the port of the postgres docker, modify it's compose file
        POSTGRES_PORT: '5432'
        # docker host when also running in the docker network
        # POSTGRES_HOST=postgres
        # docker host on windows/mac
        # POSTGRES_HOST=host.docker.internal
        # docker host on linux
        # POSTGRES_HOST=localhost
        POSTGRES_HOST: 'host.docker.internal'
        VITE_APP_MODE: 'django'
        # -----------------------------------------------------------------------------
      test:
        DJANGO_SETTINGS_MODULE: 'config.settings.test'
      staging:
        PROJECT_FQDN: ''
        PROJECT_FRONTEND_FQDN: ''
        DJANGO_SETTINGS_MODULE: 'config.settings.production'
        DJANGO_ALLOW_ASYNC_UNSAFE: 'false'
        DJANGO_SECRET_KEY: '{{ secret_key }}'
        DJANGO_ADMIN_URL: 'admin/'
        POSTGRES_USER: '{{ project_name }}staginguser'
        POSTGRES_PASSWORD: 'staging'
        POSTGRES_DB: '{{ project_name }}stagingdb'
        POSTGRES_OPTIONS: '?sslmode=prefer'
        POSTGRES_PORT: '5432'
        POSTGRES_HOST: 'localhost'
        VITE_APP_MODE: 'django'
      production:
        DEPLOYMENT_TOKEN: ''
        PROJECT_FQDN: ''
        PROJECT_FRONTEND_FQDN: ''
        DJANGO_SETTINGS_MODULE: 'config.settings.production'
        DJANGO_ALLOW_ASYNC_UNSAFE: 'false'
        DJANGO_SECRET_KEY: ''
        DJANGO_ADMIN_URL: ''
        POSTGRES_USER: '{{ project_name }}produser'
        POSTGRES_PASSWORD: ''
        POSTGRES_DB: '{{ project_name }}proddb'
        POSTGRES_OPTIONS: '?sslmode=prefer'
        POSTGRES_PORT: '5432'
        POSTGRES_HOST: 'localhost'
        VITE_APP_MODE: 'django'
