{
    "folders": [
        {
            "path": "."
        }
    ],
    "extensions": {
        "recommendations": [
            // python extensions
            "ms-python.python",
            "ms-python.vscode-pylance",
            "ms-toolsai.jupyter",
            "kevinrose.vsc-python-indent",

            // linting & formatting extensions for quality assurance and CI/CD checks
            "ms-python.pylint",
            "ms-python.black-formatter",
            "ms-python.flake8",
            "ms-python.isort",
            "ms-python.mypy-type-checker",
            "matangover.mypy",
            "charliermarsh.ruff",
            "sonarsource.sonarlint-vscode",

            // vue.js & frontend
            "Vue.volar",
            "Vue.vscode-typescript-vue-plugin",
            "bradlc.vscode-tailwindcss",

            // live-share for remote collaboration
            "ms-vsliveshare.vsliveshare",

            // nice to have
            // "stkb.rewrap",
            // "aaron-bond.better-comments",
            // "Gruntfuggly.todo-tree",
            // "bierner.markdown-footnotes",
        ]
    },
    "settings": {
        // * files ////////////////////////////////////////////////////////////
        "files.autoSave": "onFocusChange",
        "files.eol": "\n",
        "files.exclude": {
            "**/__pycache__": true,
            "**/.pytest_cache": true,
            "**/.ipynb_checkpoints/": true,
            ".vscode/": true,
            ".hypothesis/": true,
            ".mypy_cache/": true,
            ".ruff_cache/": true,
        },
        "files.associations": {
            "*.py": "python",
            "*.py-tpl": "python",
            "*.djt.html": "html",
            "*.htmx.html": "html",
            "*.djt": "jinja",
            "*.tcss": "styled-components",
        },
        // * python ///////////////////////////////////////////////////////////
        // In most cases the django-env should be read explicitly and NOT via the editorconfig.
        // you might use this python.envFile for your developer tools API keys (or whatever..) though.
        // "python.envFile": "${workspaceFolder}/envs/develop.env",
        "python.terminal.activateEnvironment": true,
        "[python]": {
            "files.eol": "\n",
            "editor.tabSize": 4,
            "editor.insertSpaces": true,
            "editor.defaultFormatter": "ms-python.black-formatter",
            // "editor.defaultFormatter": "ms-python.python",
            "editor.codeActionsOnSave": {
                // "source.fixAll.ruff": true,
                // "source.organizeImports.ruff": true
            }
        },

        // testing-settings
        "python.testing.cwd": "${workspaceFolder}/",
        "python.testing.unittestEnabled": false,
        "python.testing.pytestEnabled": true,
        // "python.testing.pytestArgs": [
        // ],
        "python.testing.autoTestDiscoverOnSaveEnabled": false,

        "python.defaultInterpreterPath": "python",
        "python.poetryPath": "poetry",
        // To support fast loading in the editor. Might cause problems with mypy.
        // "python.analysis.extraPaths": ["."],

        "pylint.args": [
            "--max-line-length=119",
            "--logging-format-style=fstr",
            "--disable=C0114",
            "--disable=C0115",
            "--disable=C0116",
            "--disable=W0511",  // should not be linted via pylint (use TODO-tree instead)
            // "--disable=C0301",
            // http://pylint-messages.wikidot.com/all-messages
            // C0301: Line too long
            // C0303: Trailing whitespace
            // C0111: Missing docstring
            // C0114: missing-module-docstring
            // C0115: missing-class-docstring
            // C0116: missing-function-docstring
            // C0411, C0412, C0413: import placement
            // C0103: snake case naming_convention
            // W0511: TODO comments
            // W0611, W0612, W0613: unused arguments+variables+imports
            // W0703: Catching too general exception
            // E0611: no name in module (just for kivy-project..)
        ],

        "flake8.args" : [
            "--max-line-length=119",
        ],

        "black-formatter.args": [
            "--line-length=119",
            "--diff",
            "--isort",
        ],

        "mypy-type-checker.args": [
            "--ignore-missing-imports",
            "--warn-unused-ignores=false",
            "--namespace-packages",
            "--explicit-package-bases",
            "--plugins=pydantic.mypy,mypy_django_plugin.main,mypy_drf_plugin.main"
        ],
        "mypy.runUsingActiveInterpreter": true,
        "mypy.dmypyExecutable": "dmypy",
        "mypy.configFile": "./pyproject.toml",

        "isort.args":[
            "--profile", "black",
            "--skip", ".eggs",
            "--skip", ".git",
            "--skip", ".mypy_cache",
            "--skip", ".venv",
            "--skip", "_build",
            "--skip", "build",
            "--skip", "dist",
            "--skip", "node_modules",
            "--skip", "venv",
            "--extend-skip", ".md",
            "--extend-skip", ".json",
            "--skip-glob", "*/node_modules/*",
            "--skip-glob", "*/config/settings/*.py",
            "--line-length", "119",
            "--project", "config",
            "--project", "core",
            "--project", "test",
            "--project", "apps",
            "--multi-line", "3",
            "--lines-after-imports", "2",
            // lines_between_sections = 1  # no CLI support yet
            "--lines-between-types", "0",
            "--combine-star", // is true now, false by default
            "--trailing-comma", // is true now, false by default
            "--split-on-trailing-comma", // is true now, false by default  # black compatible
            "--no-lines-before", "future",
            "--no-lines-before", "stdlib",
            "--no-inline-sort", // is true now, false by default
            "--src-path", "config",
            "--src-path", "core",
            "--src-path", "test",
            "--src-path", "apps",
            "--src-path", "manage.py",
            "--section-default", "THIRDPARTY",
            // "--check-only",
            // known_django = "django"  # no CLI support yet
            // sections = ['FUTURE', 'STDLIB', 'THIRDPARTY', 'DJANGO', 'FIRSTPARTY', 'LOCALFOLDER']  # no CLI support yet
        ],

        "ruff.lint.args": ["--line-length", "179",],
        "ruff.organizeImports": false,
        "ruff.trace.server": "verbose",

        "sonarlint.rules": {
            // "Define a constant instead of duplicating this literal"
            "python:S1192":{  // String literals should not be duplicated
                "level": "on",
                "parameters": {
                    "threshold": 7
                }
            },
            "typescript:S1117":{  // ""already declared in the upper scope" has a lot of false positives
                "level": "off",
            }
        },

        "jupyter.askForKernelRestart": false,
        "jupyter.debugJustMyCode": false,
        "jupyter.widgetScriptSources": ["jsdelivr.com", "unpkg.com"],

        "notebook.cellToolbarLocation": {
            "default": "right",
            "jupyter-notebook": "right"
        },
        "notebook.output.textLineLimit": 300,

        "djangointellisense.projectRoot": "${workspaceFolder}",
        "djangointellisense.settingsModule": "config.settings.develop",
        "djangointellisense.debugMessages": false,

        // better-comments
        "better-comments.tags": [
            {
                "tag": "!",  // alerts
                "color": "#FF2D00",
                "strikethrough": false,
                "underline": false,
                "backgroundColor": "transparent",
                "bold": false,
                "italic": false
            },
            {
                "tag": "?",  // queries
                "color": "#3498DB",
                "strikethrough": false,
                "underline": false,
                "backgroundColor": "transparent",
                "bold": false,
                "italic": false
            },
            {
                "tag": "//",  // disabled-comment
                "color": "#474747",
                "strikethrough": true,
                "underline": false,
                "backgroundColor": "transparent",
                "bold": false,
                "italic": false
            },
            {
                "tag": "todo",  // t0d0s
                "color": "#ffc800",
                "strikethrough": false,
                "underline": false,
                "backgroundColor": "transparent",
                "bold": false,
                "italic": false
            },
            {
                "tag": "fixme",  // fixmes
                "color": "#ff9100",
                "strikethrough": false,
                "underline": false,
                "backgroundColor": "transparent",
                "bold": false,
                "italic": false
            },
            {
                "tag": "hack",  // fixmes
                "color": "#fffb00",
                "strikethrough": false,
                "underline": false,
                "backgroundColor": "transparent",
                "bold": false,
                "italic": false
            },
            {
                "tag": "bug",  // bugs
                "color": "#cc212c",
                "strikethrough": false,
                "underline": false,
                "backgroundColor": "transparent",
                "bold": false,
                "italic": false
            },
            {
                "tag": "wtf",
                "color": "#ff5733",
                "strikethrough": false,
                "underline": false,
                "backgroundColor": "transparent",
                "bold": false,
                "italic": false
            },
            {
                "tag": "*",  // highlights
                "color": "#98C379",
                "strikethrough": false,
                "underline": false,
                "backgroundColor": "transparent",
                "bold": false,
                "italic": false
            }
        ],

        // T0D0-tree
        "todo-tree.regex.regex": "(//|#|<!--|;|/\\*|^|^\\s*(-|\\d+.))\\s*($TAGS)",
        "todo-tree.general.tags" :[
            "TODO",
            "FIXME",
            "HACK",
            "BUG",
            "TBD",
            "WTF",
            "[ ]",
            "[x]"
        ],
        "todo-tree.highlights.customHighlight": {
            "TODO": {
                "type": "tag",
                "foreground": "#FF00FF",
                "iconColour": "#008000",
            },
            "FIXME": {
                "type": "tag",
                "foreground": "#FF00FF",
                "icon": "alert",
                "iconColour": "#FFFF00",
            },
            "HACK": {
                "type": "tag",
                "icon": "flame",
                "iconColour": "#808080",
            },
            "BUG": {
                "type": "text",
                "foreground": "#FF0000",
                "icon": "zap",
                "iconColour": "#FF0000",
            },
            "TBD": {
                "type": "tag",
                "foreground": "#FF00FF",
                "icon": "organization",
                "iconColour": "#FF00FF",
            },
            "WTF": {
                "type": "text",
                "foreground": "#FFA500",
                "icon": "megaphone",
                "iconColour": "#FFA500",
            },
            "[ ]": {
                "background": "#ff000080"
            },
            "[x]": {
                "background": "#00ff0080"
            }
        },
    },
    "launch": {
        "version": "0.2.0",
        "configurations": [
            {
                "name": "Python: pytest",
                "type": "python",
                "request": "launch",
                "module": "pytest",
                "console": "integratedTerminal",
                "args": [
                    // "test",
                ],
                "env": {
                    // "DOPPLER_ENV": "1"  // Enable doppler-env to inject env vars directly into the terminal, not needed when using .env files
                }
            },
            {
                "name": "Python: Django",
                "type": "python",
                "request": "launch",
                "program": "${workspaceFolder}/manage.py",
                "console": "integratedTerminal",
                "args": [
                    "runserver",
                ],
                "django": true,
                "env": {
                    // "DOPPLER_ENV": "1"  // Enable doppler-env to inject env vars directly into the terminal, not needed when using .env files
                }
            },
            {
                "name": "Python: commands.py",
                "type": "python",
                "request": "launch",
                "program": "${workspaceFolder}/commands.py",
                "console": "integratedTerminal",
                "args": ["--help"],
                "env": {
                    // "DOPPLER_ENV": "1"  // Enable doppler-env to inject env vars directly into the terminal, not needed when using .env files
                }
            },
        ]
    }
}
