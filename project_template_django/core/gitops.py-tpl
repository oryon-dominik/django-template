import logging
import shutil
from datetime import date
from pathlib import Path
from typing import TypeAlias

import git
from rich import print
from rich.progress import Progress

from config.settings.base.logging import loglevel


GitRepo: TypeAlias = git.Repo  # type: ignore
GitCommit: TypeAlias = git.Commit  # type: ignore


def sqash_commits(*, repo: GitRepo, head: str, message: str) -> GitCommit:
    """Squash all commits into one."""
    repo.git.reset("--soft", f"{head}")
    repo.git.add(".")
    repo.git.commit("-m", message)
    return repo.head.commit


def squash_commit_messages(*, repo: GitRepo, commits: list[GitCommit], latest: str):
    message = repo.git.log("-n", f"{len(commits)}", "--pretty=format:%s", latest)
    return "\n".join(reversed(message.split("\n")))


def get_latest_commit_hash(*, repository: GitRepo) -> str:
    latest_commit = repository.head.commit
    commit_hash = latest_commit.hexsha
    return commit_hash


def clone_and_get_latest_commit_hash(*, repository_url: str):
    # !lazy import to avoid circular imports
    from .inout.directories import TemporaryDirectory

    with TemporaryDirectory(panic=False, log_errors=False) as temporary_directory:
        repo = GitRepo.clone_from(repository_url, temporary_directory)
        commit_hash = get_latest_commit_hash(repository=repo)
    return commit_hash


def rename_and_inject(
    *,
    path: Path,
    context: dict,
    suffix: str = "-tpl",
):
    """Rename -tpl files (remove suffix) and inject jinja context"""
    # ! lazy import to avoid circular imports
    from .inout.files import jinja_replace_context

    ignore_patterns = [".git", "keep.pyc"]  # TODO: add more patterns to ignore
    for element in path.iterdir():
        if any([pattern in element.name for pattern in ignore_patterns]):
            # don't do things in the git folder etc..
            continue
        if element.is_dir():
            rename_and_inject(path=element, context=context, suffix=suffix)
            if "project_name" in element.name:
                # rename folder if it contains project_name
                new_path = element.parent / element.name.replace("project_name", context["project_name"])
                element = element.rename(new_path)
        else:
            new_name = element.name.removesuffix(suffix)
            if new_name != element.name:
                # rename file if it ends with suffix
                new_path = element.parent / new_name
                element = element.rename(new_path)
            if "project_name" in element.name:
                # rename file if it contains project_name
                new_path = element.parent / new_name.replace("project_name", context["project_name"])
                element = element.rename(new_path)
            jinja_replace_context(path=element, context=context)


@loglevel(level=logging.INFO, logger=logging.getLogger("core.gitops"))
@loglevel(level=logging.INFO, logger=logging.getLogger("core.io"))
def pick_changes(
    *,
    project_path: Path,
    from_url: str,
    from_hash: str,
    template_name: str,
    context: dict,
):
    """
    cherry pick changes from template repository to the project

    $ git cherry-pick <old_commit_hash>..<latest_commit_hash>
    $ git cherry-pick --continue
    """
    # ! lazy import to avoid circular imports
    from .inout.directories import TemporaryDirectory
    from .pyproject import update_latest_commithash

    current_repo = git.Repo(project_path)  # type: ignore

    with TemporaryDirectory(panic=False, log_errors=False, keep=True) as temporary_directory, Progress() as progress:

        print(
            f"Isolating [blue]{template_name}[/blue] from the skeleton's repository. Adjust files and inject context."
        )
        task = progress.add_task("Progress", total=7)

        # Clone template repository to the temporary directory
        template_repo = GitRepo.clone_from(url=from_url, to_path=temporary_directory)
        latest = get_latest_commit_hash(repository=template_repo)
        progress.advance(task)

        template_repo.git.checkout("HEAD", b="changes")
        template_repo.git.commit("--allow-empty", f"--message=Apply template changes for {context['project_name']}")
        initial = get_latest_commit_hash(repository=template_repo)
        progress.advance(task)

        # BUG: we are re-writing the currents repo history here, this is not a good idea.
        # BUG: We should instead pick the changes and re-write the single blobs
        # history and rehash the tree to apply changes only and not the whole
        # file-tree

        # FIXME: we need to refactor logic, so:
        # - make an initial commit
        # start with startproject
        # - make an update commit
        # - note that update_from_hash
        # - work commits are here..
        # update:
        # - make a new branch "new-trunk"
        # - make a new startproject
        # - make an update commit
        # - note the new_update_from_hash
        # - rebase all commits after the startproject update_from_hash commit ontop of new_update_from_hash
        # - remove update_from_hash from toml and replace with new_update_from_hash
        # delete old trunk replace with new trunk or replace with tags and versions?!

        # deprecated old :
        # ~~ Clean up the template repository from unused files. ~~
        # ~~ - Remove all changes not applied for the current project template. ~~
        # ~~ - Remove the suffix -tpl from all files. ~~
        # ~~ - Inject the jinja context into all files. ~~


        template_repo.git.filter_branch("--subdirectory-filter", template_name, "HEAD")
        progress.advance(task)
        rename_and_inject(
            path=temporary_directory,
            suffix="-tpl",
            context=context,
        )
        progress.advance(task)

        # Stage changes and create a new commit-
        template_repo.git.add(".")
        template_repo.git.commit(
            "--all",
            f"--message=Inject context from {context['project_name']} into '{template_name}' - {date.today()}",
        )
        changed = get_latest_commit_hash(repository=template_repo)
        progress.advance(task)

        # Get the commit messages of the last commits and squash them into one.
        commits = list(template_repo.iter_commits(f"{from_hash}..{changed}"))
        message = squash_commit_messages(repo=template_repo, commits=commits, latest=changed)
        _ = sqash_commits(
            repo=template_repo,
            head=initial,
            message=message,
        )
        progress.advance(task)

        from config.settings.base.paths import ROOT_DIR

        shutil.copytree(
            temporary_directory,
            ROOT_DIR,
            dirs_exist_ok=True,
            ignore=shutil.ignore_patterns(
                ".git",
                "keep.pyc",
            ),
        )

        template_repo.close()
        current_repo.close()
        progress.advance(task)

    update_latest_commithash(project_root_path=project_path, latesthash=latest)
