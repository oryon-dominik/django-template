import logging
from pathlib import Path


log = logging.getLogger("core.io")


def read_from_disk(path: Path) -> str:
    """
    Read from a file.
    Return the content of the file as a string.
    """
    try:
        with open(path) as file:
            content = file.read()
        log.debug(f"INOUT.FILES.READ {len(content)=} {path=}")
        return content
    except FileNotFoundError as e:
        log.error(f"{path} does not exist.")
        raise e
    except PermissionError as e:
        log.error(f"A permission error occurred while reading the file: {e}")
        raise e
    except TypeError as e:
        log.error(f"Invalid type for path: {e}")
        raise e
    except OSError as e:
        log.error(f"An OS error occurred while reading the file: {e}")
        raise e
    except Exception as e:
        log.error(f"An unexpected error occurred: {e}")
        raise e
    return ""


def write_to_disk(path: Path, content: str | bytes):
    """Write to a file."""
    content_type = type(content)
    if content_type is not bytes and content_type is not str:
        raise TypeError(f"Content must be a string or bytes, not {content_type}")

    mode = "w" if content_type is str else "wb"

    try:
        with open(file=path, mode=mode) as file:
            log.debug(f"INOUT.FILES.WRITE {len(content)=} {path=}")
            file.write(content)
    except PermissionError as e:
        log.error(f"A permission error occurred while writing the file: {e}")
        raise e
    except TypeError as e:
        log.error(f"Invalid type for path: {e}")
        raise e
    except OSError as e:
        log.error(f"An OS error occurred while writing the file: {e}")
        raise e
    except Exception as e:
        log.error(f"An unexpected error occurred: {e}")
        raise e
