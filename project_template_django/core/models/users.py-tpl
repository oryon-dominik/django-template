import unicodedata

from django.contrib.auth.models import PermissionsMixin as AuthPermissionsMixin
from django.contrib.auth.models import AbstractBaseUser as DjangoAbstractBaseUser
from django.core.mail import send_mail
from django.core.validators import validate_email
from django.db import models
from django.urls import reverse
from django.utils import timezone
from django.utils.translation import gettext_lazy as _

from .generics import UUIDModel
from .managers import CoreUserManager


class CoreAbstractBaseUser(  # type: ignore # BUG: https://github.com/typeddjango/django-stubs/issues/471
    UUIDModel,
    DjangoAbstractBaseUser,
    AuthPermissionsMixin,
):
    """
    Abstract User model. Implementing a fully featured User model with
    admin-compliant permissions.

    email and password are required. Other fields are optional.
    Username has been removed completely.
    """

    objects = CoreUserManager()

    email = models.EmailField(
        _("email address"),
        unique=True,
        help_text=_("Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."),
        validators=[validate_email],
        error_messages={
            "unique": _("A user with that email already exists."),
        },
        max_length=150,
    )

    # First Name and Last Name do not cover name patterns
    # around the globe.
    name = models.CharField(blank=True, max_length=255)

    EMAIL_FIELD = "email"
    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = []

    is_staff = models.BooleanField(
        _("Is staff status"),
        default=False,
        help_text=_("Designates whether the user can log into the admin site."),
    )
    is_active = models.BooleanField(
        _("active"),
        default=True,
        help_text=_(
            "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
        ),
    )
    date_joined = models.DateTimeField(_("date joined"), default=timezone.now)

    def clean(self):
        setattr(self, self.EMAIL_FIELD, self.normalize_username(self.get_email()))
        self.email = self.__class__.objects.normalize_email(self.email)  # type: ignore[attr-defined]

    def get_email(self):
        """Return the email for this User."""
        return getattr(self, self.EMAIL_FIELD)

    def natural_key(self):
        return (self.get_email(),)

    def get_full_name(self):
        return self.name.strip()

    @property
    def first_name(self):
        return self.name.split(" ")[0]

    @property
    def last_name(self):
        try:
            self.name.split(" ")[1]
        except IndexError:
            # Fall back to name if no last name is present
            return self.name

    def get_short_name(self):
        """Return the short name for the user."""
        return self.name.split(" ")[0]

    def email_user(self, subject, message, from_email=None, **kwargs):
        """Send an email to this user."""
        send_mail(subject, message, from_email, [self.email], **kwargs)

    def __str__(self):
        return self.get_email()

    class Meta:
        abstract = True
        default_manager_name = "objects"

    @classmethod
    def normalize_email(cls, email):
        return (
            unicodedata.normalize("NFKC", email)
            if isinstance(email, str)
            else email
        )


class CoreAbstractUser(CoreAbstractBaseUser):
    class Roles(models.TextChoices):
        INCOMPLETE = "inc", "Incomplete Profile"  # !default
        ADMIN = "adm", "Admin"  # dev only
        API = "api", "Api User"

    verified = models.BooleanField(
        _("verified"),
        default=False,
        help_text=_("Designates whether this user has been verified (usally via email)."),
    )
    role = models.CharField(max_length=3, choices=Roles.choices, default=Roles.INCOMPLETE)

    def get_absolute_url(self):
        return reverse("accounts:detail", kwargs={"email": self.email})

    @property
    def url(self):
        return self.get_absolute_url()

    @property
    def designation(self):
        return self.Roles(self.role).label

    class Meta:
        verbose_name = _("user")
        verbose_name_plural = _("users")
        default_manager_name = "objects"
        abstract = True
