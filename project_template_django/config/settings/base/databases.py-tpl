# -- Modular settings ---------------------------------------------------------
# These settings are imported in the __init__.py of the base directory explicitly.
# To add a new setting, also edit the __init__.py
# -----------------------------------------------------------------------------
# DATABASES
# https://docs.djangoproject.com/en/{{ doc_version }}/ref/settings/#databases
import re
from environs import Env


def define_databases(env: Env) -> dict:
    """
    Define databases for the project.
    will be read from .env files or the environment provided.
    """
    # pylint: disable=invalid-name
    # pylint: disable=possibly-unused-variable
    # --- POSTGRES ----------------------------------------------------------------
    # POSTGRES_DB = env.str("POSTGRES_DB", default="{{ project_name }}")
    # POSTGRES_USER = env.str("POSTGRES_USER")
    # POSTGRES_PASSWORD = env.str("POSTGRES_PASSWORD")
    # POSTGRES_HOST = env.str("POSTGRES_HOST")
    # POSTGRES_PORT = env.int("POSTGRES_PORT")
    # POSTGRES_OPTIONS = env.str("POSTGRES_OPTIONS", default="")
    # POSTGRES_CONNECTION_STRING = (
    #     f"postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}"
    #     + f"@{POSTGRES_HOST}:{POSTGRES_PORT}/{POSTGRES_DB}{POSTGRES_OPTIONS}"
    # )
    # TODO: Test if these regexes really work for all connection strings.
    # DATABASE_URL = env.str("DATABASE_URL", default=POSTGRES_CONNECTION_STRING)
    # POSTGRES_USER = (
    #     user_match.group(1)
    #     if (user_match := re.search(r"(?:postgres|psql|postgresql):\/\/([^:]+)", DATABASE_URL))
    #     else POSTGRES_USER
    # )
    # POSTGRES_PASSWORD = (
    #     password_match.group(1)
    #     if (password_match := re.search(r":\/\/[^:]+:([^@]+)", DATABASE_URL))
    #     else POSTGRES_PASSWORD
    # )
    # POSTGRES_HOST = host_match.group(1) if (host_match := re.search(r"@([^:\/]+)", DATABASE_URL)) else POSTGRES_HOST
    # POSTGRES_PORT = port_match.group(1) if (port_match := re.search(r":(\d+)\/", DATABASE_URL)) else POSTGRES_PORT
    # POSTGRES_DB = name_match.group(1) if (name_match := re.search(r"/(\w+)\?", DATABASE_URL)) else POSTGRES_DB
    # POSTGRES_OPTIONS = (
    #     options_match.group(1) if (options_match := re.search(r"\?(.+)", DATABASE_URL)) else POSTGRES_OPTIONS
    # )
    # DATABASES = {
    #     "default": {
    #         "HOST": POSTGRES_HOST,
    #         "NAME": POSTGRES_DB,
    #         "PORT": POSTGRES_PORT,
    #         "USER": POSTGRES_USER,
    #         "PASSWORD": POSTGRES_PASSWORD,
    #         "ENGINE": "django.db.backends.postgresql",
    #         # see notes on connections: https://docs.djangoproject.com/en/{{ docs_version }}/ref/databases/#general-notes
    #         "CONN_MAX_AGE": 0,
    #         # "CONN_HEALTH_CHECKS": False,
    #         "OPTIONS": {"sslmode": "prefer"},
    #     }
    # }

    # --- SQLite ------------------------------------------------------------------
    from . import paths

    DATABASES_DIR = paths.ROOT_DIR / "databases"
    DATABASES_DIR.mkdir(exist_ok=True)
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": DATABASES_DIR / "{{ project_name }}-sqlite3.db",
            "OPTIONS": {"timeout": 10},  # ! concurrent queries won't wait forever
        }
    }
    DATABASES["default"]["ATOMIC_REQUESTS"] = True

    # --- REDIS ---------------------------------------------------------------
    # REDIS_PASSWORD = env.str("REDIS_PASSWORD", default="")
    # # Redis keys for SSL connections
    # # REDIS_KEY_FILE = '/path/to/client.key'
    # # REDIS_CERT_FILE = '/path/to/client.crt'
    # # REDIS_CA_FILE = '/path/to/CAcert.pem' or '/path/to/ca.crt'
    # redis_default = POSTGRES_HOST if "POSTGRES_HOST" in locals() else "localhost"  # type: ignore # noqa
    # REDIS_HOST = env.str("REDIS_HOST", default=redis_default)
    # REDIS_PORT = env.int("REDIS_PORT", default=6379)
    # REDIS_DATABASE_NAMESPACE = env.str("REDIS_DATABASE_NAMESPACE", default="0")

    # redisurlpass = f":{REDIS_PASSWORD}@" if REDIS_PASSWORD else ""
    # REDIS_URL = env.str(
    #     "REDIS_URL",
    #     default=f"redis://{redisurlpass}{REDIS_HOST}:{REDIS_PORT}/{REDIS_DATABASE_NAMESPACE}"
    # )
    # del redisurlpass

    # CACHES = {
    #     "default": {
    #         "LOCATION": REDIS_URL,
    #         # "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
    #         "BACKEND": "django_redis.cache.RedisCache",
    #         # "OPTIONS": REDIS_OPTIONS,
    #     },
    #     "sessions": {
    #         "LOCATION": REDIS_URL,
    #         # "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
    #         "BACKEND": "django_redis.cache.RedisCache",
    #         # "OPTIONS": REDIS_OPTIONS,
    #     },
    #     "redis": {
    #         "LOCATION": REDIS_URL,
    #         # "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
    #         "BACKEND": "django_redis.cache.RedisCache",
    #         # "OPTIONS": REDIS_OPTIONS,
    #         # },
    #     },
    #     "jwt-blacklist": {
    #         "LOCATION": REDIS_URL,
    #         # ! this is not thread-safe and not recommended, if you use multiple workers
    #         # 'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    #         # ! this is slow in production. Maybe use redis or memcached
    #         # "BACKEND": "django.core.cache.backends.db.DatabaseCache",
    #         "BACKEND": "django_redis.cache.RedisCache",
    #         "OPTIONS": REDIS_OPTIONS,
    #     },
    # }

    # pylint: enable=invalid-name
    # pylint: enable=possibly-unused-variable

    # ! shall not return the env, we didn't want to modify
    del env
    return locals()


# Should be typed and initialized here (will be overwritten!), to be available
# in the whole project [mypy] (because imported in __init__.py)
# POSTGRES_DB: str = "{{ project_name }}"
# POSTGRES_USER: str = ""
# POSTGRES_PASSWORD: str = ""
# POSTGRES_HOST: str = ""
# POSTGRES_PORT: int = 0
# POSTGRES_OPTIONS: str = ""
# REDIS_URL: str = ""
# CACHES: dict = {}

# -----------------------------------------------------------------------------

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# REDIS_OPTIONS = {
#     "CLIENT_CLASS": "django_redis.client.DefaultClient",
#     # http://niwinz.github.io/django-redis/latest/#_memcached_exceptions_behavior,
#     "IGNORE_EXCEPTIONS": True,  # mimics memcache behavior.
#     # connection pool kwargs to configure the use of certificates
#     "CONNECTION_POOL_KWARGS": {
#         # "ssl_cert_reqs": None
#         # 'ssl_ca_certs': REDIS_CA_FILE,
#         # 'ssl_certfile': REDIS_CERT_FILE,
#         # 'ssl_keyfile': REDIS_KEY_FILE,
#     },
# }

CACHES = {
    "default": {
        "LOCATION": "{{ project_name }}--default-cache",
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        # "BACKEND": "django_redis.cache.RedisCache",
        # "OPTIONS": REDIS_OPTIONS,
    },
    "sessions": {
        "LOCATION": "{{ project_name }}--sessions-cache",
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        # "BACKEND": "django_redis.cache.RedisCache",
        # "OPTIONS": REDIS_OPTIONS,
    },
    "redis": {
        "LOCATION": "{{ project_name }}--locmem-fake-redis-cache",
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        # "BACKEND": "django_redis.cache.RedisCache",
        # "OPTIONS": REDIS_OPTIONS,
        # },
    },
    "jwt-blacklist": {
        "LOCATION": "{{ project_name }}--blacklisted-jwts-cache",
        # ! this is not thread-safe and not recommended, if you use multiple workers
        # 'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        # ! this is slow in production. Maybe use redis or memcached
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        # "BACKEND": "django_redis.cache.RedisCache",
        # "OPTIONS": REDIS_OPTIONS,
    },
}
