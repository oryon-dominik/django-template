# -- Modular settings ---------------------------------------------------------
# These settings are imported in the __init__.py of the base directory explicitly.
# To add a new setting, also edit the __init__.py
# -----------------------------------------------------------------------------
# DATABASES
# https://docs.djangoproject.com/en/{{ doc_version }}/ref/settings/#databases
import environ


def define_databases(env: environ.Env) -> dict:
    """
    Define databases for the project.
    will be read from .env files or the environment provided.
    """
    # pylint: disable=invalid-name
    # pylint: disable=possibly-unused-variable
    # --- POSTGRES ----------------------------------------------------------------
    # POSTGRES_DB = env.str("POSTGRES_DB", default="{{ project_name }}")  # type: ignore[no-untyped-call]
    # POSTGRES_USER = env.str("POSTGRES_USER")
    # POSTGRES_PASSWORD = env.str("POSTGRES_PASSWORD")
    # POSTGRES_HOST = env.str("POSTGRES_HOST")
    # POSTGRES_PORT = env.int("POSTGRES_PORT")
    # POSTGRES_OPTIONS = env.str("POSTGRES_OPTIONS", default="")  # type: ignore[no-untyped-call]
    # POSTGRES_CONNECTION_STRING = (
    #     f"postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}"
    #     + f"@{POSTGRES_HOST}:{POSTGRES_PORT}/{POSTGRES_DB}{POSTGRES_OPTIONS}"
    # )
    # DATABASE_URL = env.str("DATABASE_URL", default=POSTGRES_CONNECTION_STRING)  # type: ignore[no-untyped-call]

    # DATABASES = {
    #     "default": env.db(
    #         "DATABASE_URL",
    #         default=DATABASE_URL,  # type: ignore[no-untyped-call]
    #         engine="django.db.backends.postgresql",
    #     )
    # }

    # --- SQLite ------------------------------------------------------------------
    from . import paths

    DATABASES = {"default": {
        "ENGINE": "django.db.backends.sqlite3", "NAME": paths.ROOT_DIR / "database" / "sqlite3.db",
        "OPTIONS": {"timeout": 10},  # ! concurrent queries won't wait forever
    }}
    DATABASES["default"]["ATOMIC_REQUESTS"] = True

    # --- REDIS ---------------------------------------------------------------
    REDIS_PASSWORD = env.str("REDIS_PASSWORD", default="")  # type: ignore[no-untyped-call]
    # REDIS_KEY_FILE = '/path/to/client.key'
    # REDIS_CERT_FILE = '/path/to/client.crt'
    # REDIS_CA_FILE = '/path/to/CAcert.pem' or '/path/to/ca.crt'

    redisurlpass = f":{REDIS_PASSWORD}@" if REDIS_PASSWORD else ""
    REDIS_URL = env.str("REDIS_URL", default=f"redis://{redisurlpass}redis:6379/1")  # type: ignore[no-untyped-call]
    del redisurlpass

    # pylint: enable=invalid-name
    # pylint: enable=possibly-unused-variable

    # ! shall not return the env, we didn't want to modify
    del env
    return locals()


# -----------------------------------------------------------------------------

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "unique-snowflake-{{ project_name }}--cache",
    },
    "redis": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            # http://niwinz.github.io/django-redis/latest/#_memcached_exceptions_behavior,
            "IGNORE_EXCEPTIONS": True,  # mimics memcache behavior.
            # connection pool kwargs to configure the use of certificates
            "CONNECTION_POOL_KWARGS": {
                # "ssl_cert_reqs": None
                # 'ssl_ca_certs': REDIS_CA_FILE,
                # 'ssl_certfile': REDIS_CERT_FILE,
                # 'ssl_keyfile': REDIS_KEY_FILE,
            },
        },
    },
    "jwt-blacklist": {
        # ! this is not thread-safe and not recommended, if you use multiple workers
        # 'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        # ! this is slow in production. Maybe use redis or memcached
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "blacklisted_jwts_cache",
    },
}
