# -- Modular settings ---------------------------------------------------------
# These settings are imported in the __init__.py of the base directory explicitly.
# To add a new setting, also edit the __init__.py
# -----------------------------------------------------------------------------
from pathlib import Path

from django.contrib.staticfiles.finders import BaseFinder, searched_locations
from django.core.files.storage import FileSystemStorage
from django.contrib.staticfiles import utils

from .. import paths


DJANGO_VITE_ROOT_PATH = paths.ROOT_DIR / "frontend"
DJANGO_VITE_DEV_PATH = DJANGO_VITE_ROOT_PATH / "src"
DJANGO_VITE_ASSETS_PATH = DJANGO_VITE_ROOT_PATH / "dist"
DJANGO_VITE_DEV_SERVER_PORT = 5173
DJANGO_VITE_DEV_MODE = True


class ViteFrontendFinder(BaseFinder):
    """
    A static files finder that looks in the directory of the frontend
    specified in the source_dir attribute.

    """

    storage_class = FileSystemStorage
    source_dir = DJANGO_VITE_DEV_PATH / "assets"
    framework = "vite"

    def __init__(self, app_names=None, *args, **kwargs):
        # The list of apps that are handled
        self.apps = []
        # Mapping of app names to storage instances
        self.storages = {}
        frontend_storage = self.storage_class(str(self.source_dir.resolve()))

        if Path(frontend_storage.location).is_dir():
            self.storages[self.framework] = frontend_storage
        super().__init__(*args, **kwargs)

    def list(self, ignore_patterns):
        """
        List all files in the framework storage.
        """
        for storage in self.storages.values():
            if storage.exists(""):  # check if storage location exists
                for path in utils.get_files(storage, ignore_patterns):
                    yield path, storage

    def find(self, path, all=False):
        """
        Look for files in the framework's directory.
        """
        matches = []

        frontend_location = self.storages[self.framework].location
        if frontend_location not in searched_locations:
            searched_locations.append(frontend_location)
        match = self.find_files(frontend_location, path)
        if match:
            if not all:
                return match
            matches.append(match)
        return matches

    def find_files(self, name, path):
        """
        Find a requested static file in the frontends static locations.
        """
        storage = self.storages.get(name)
        # Only try to find a file if the source dir actually exists.
        if storage and storage.exists(path):
            matched_path = storage.path(path)
            if matched_path:
                return matched_path
